----------------COMANDOS CREATE---------------------

--TABLA PUESTOS-----------------------------------
CREATE TABLE PUESTOS(
    Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50),
    Descripcion VARCHAR2(200),
    Salario DECIMAL(10,2)
)


--TABLA CLIENTES-----------------------------------
CREATE TABLE CLIENTES(
    DPI NUMBER PRIMARY KEY,
    Nombre VARCHAR2(100),
    Apellidos VARCHAR2(100),
    Fecha_Nacimiento DATE,
    Correo VARCHAR2(100),
    Telefono INT,
    NIT VARCHAR2(20)
)


--TABLA DIRECCIONES-----------------------------------
CREATE TABLE DIRECCIONES(
    Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DPI_Cliente NUMBER,
    CONSTRAINT fk_direccion_cliente FOREIGN KEY (DPI_Cliente) REFERENCES CLIENTES(DPI),
    Direccion VARCHAR2(200),
    Municipio VARCHAR2(50),
    Zona INT
)


--TABLA RESTAURANTES-----------------------------------
CREATE TABLE RESTAURANTES(
	Id VARCHAR2(100) PRIMARY KEY,
	Direccion VARCHAR2(200),
    Municipio VARCHAR2(100),
    Zona INT,
    Telefono INT,
    Personal INT,
    Parqueo NUMBER
)


--TABLA ORDENES-----------------------------------
CREATE TABLE ORDENES(
    Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DPI_Cliente NUMBER,
    Id_Direccion INT,
    CONSTRAINT fk_orden_direccion FOREIGN KEY (Id_Direccion) REFERENCES DIRECCIONES(Id),
    Canal VARCHAR2(1),
    Inicio DATE,
    Entrega DATE,
    IdRestaurante VARCHAR2(100),
    CONSTRAINT fk_orden_restaurante FOREIGN KEY (IdRestaurante) REFERENCES RESTAURANTES(Id),
    Estado VARCHAR2(20)    
)


--TABLA DETALLE-----------------------------------
CREATE TABLE DETALLE(
    Id_Orden INT,
    CONSTRAINT fk_detalle_orden FOREIGN KEY (Id_Orden) REFERENCES ORDENES(Id),
    TipoProducto CHAR,
    Producto INT,
    Cantidad INT,
    Precio DECIMAL(10,2),
    Observacion VARCHAR2(300)
)


--TABLA DETALLE-----------------------------------
CREATE TABLE FACTURA(
    SERIE VARCHAR(20),
    Total DECIMAL(10,2),
    Lugar VARCHAR2(100),
    Fecha_Hora DATE,
    IdOrden Number,
    NIT VARCHAR2(20),
    Forma_Pago CHAR,
    IdRepartidor NUMBER
)


--TABLA EMPLEADOS-----------------------------------
CREATE TABLE EMPLEADOS(
	Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	Nombre VARCHAR2(100),
    Apellidos VARCHAR2(100),
    Fecha_Nacimiento DATE,
    Correo VARCHAR2(100),
    Telefono INT,
    Direccion VARCHAR2(200),
    DPI NUMBER,
   	Puesto INT,
    CONSTRAINT fk_empleado_puesto FOREIGN KEY (Puesto) REFERENCES PUESTOS(Id),
   	Fecha_Inicio DATE,
    IdRestaurante VARCHAR2(100),
    CONSTRAINT fk_empleado_restaurante FOREIGN KEY (IdRestaurante) REFERENCES RESTAURANTES(Id)
)


--TABLA HISTORIAL-----------------------------------
CREATE TABLE Historial(
	ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	fecha_ejecucion DATE,
	tabla VARCHAR2(100),
	tipo VARCHAR2(25)
	CONSTRAINT pk_historial PRIMARY KEY (ID)
)




----------------COMANDOS DE FUNCIONES---------------------

--TABLA CLIENTES-----------------------------------
CREATE OR REPLACE FUNCTION GETCURRENTDATE RETURN DATE AS
BEGIN
    RETURN SYSDATE;
END;


-----------------------------------------------------------
----------------COMANDOS DE TIGRES-------------------------

--INSERT RESTAURANTE-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_restaurante
AFTER INSERT ON restaurantes
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en RESTAURANTES', 'INSERT');
END;


--INSERT PUESTOS-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_puesto
AFTER INSERT ON PUESTOS
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en PUESTOS', 'INSERT');
END;


--INSERT EMPLEADOS-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_empleado
AFTER INSERT ON EMPLEADOS
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en EMPLEADOS', 'INSERT');
END;


--INSERT DIRECCIONES-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_Direcciones
AFTER INSERT ON DIRECCIONES
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en DIRECCIONES', 'INSERT');
END;


--INSERT DETALLLE-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_Detalle
AFTER INSERT ON DETALLE
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en DETALLE', 'INSERT');
END;


--INSERT CLIENTES-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_Clientes
AFTER INSERT ON CLIENTES
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en CLIENTES', 'INSERT');
END;


--INSERT ORDENES-----------------------------------
CREATE OR REPLACE TRIGGER tr_insert_Ordenes
AFTER INSERT ON ORDENES
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha insertado un registro en ORDENES', 'INSERT');
END;


--UPDATE ORDENES-----------------------------------
CREATE OR REPLACE TRIGGER tr_update_Ordenes
AFTER UPDATE ON ORDENES
FOR EACH ROW
BEGIN
    -- Insertar un registro en la tabla historial
    INSERT INTO historial (fecha_ejecucion, tabla, tipo)
    VALUES (GETCURRENTDATE(), 'Se ha actualizado un registro en ORDENES', 'UPDATE');
END;



-----------------------------------------------------------
----------------COMANDOS DE FUNCIONES----------------------

--RESTAURANTE VALIDACIONES----------------------------------
CREATE OR REPLACE PROCEDURE RegistrarRestaurante (
    p_id IN VARCHAR2,
    p_address IN VARCHAR2,
    p_municipio IN VARCHAR2,
    p_zona IN NUMBER,
    p_phone IN NUMBER,
    p_personal IN NUMBER,
    p_has_parking IN NUMBER
) AS
BEGIN
    -- Verificar si la zona es positiva
    IF p_zona < 0 THEN
        DBMS_OUTPUT.PUT_LINE('La zona debe ser Positiva.'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    
    IF existeRestaurate(p_id) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('El restaurante ya existe'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
   
    -- Insertar el registro en la tabla restaurante
    DBMS_OUTPUT.PUT_LINE('Registro insertado en la tabla restaurante.');
    INSERT INTO RESTAURANTES(ID, DIRECCION , municipio, ZONA, TELEFONO , PERSONAL , PARQUEO)
    VALUES (p_id, p_address, p_municipio, p_zona, p_phone, p_personal, p_has_parking);
    
    -- Imprimir un mensaje indicando que la inserción se realizó con éxito
    
END;


CREATE OR REPLACE FUNCTION existeRestaurate (
	p_id IN varchar2
) RETURN INT AS
    v_count NUMBER;
BEGIN
    -- Contar la cantidad de registros en la tabla restaurante que tienen el mismo ID
    SELECT COUNT(*) INTO v_count FROM RESTAURANTES WHERE id = p_id;
    -- Retornar TRUE si no se encontró ningún registro con el mismo ID, FALSE en caso contrario
    IF v_count = 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END;



--PUESTO PROCEDURE-----------------------------------------
CREATE OR REPLACE PROCEDURE RegistrarPuesto (
    p_nombre IN VARCHAR2,
    p_descripcion IN VARCHAR2,
    p_salario IN DECIMAL
) AS
BEGIN
    -- Verificar si la zona es positiva
    IF  p_salario < 0 THEN
        DBMS_OUTPUT.PUT_LINE('El salario debe ser positivo.'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    
    INSERT INTO PUESTOS (NOMBRE , DESCRIPCION, SALARIO) 
    VALUES (p_nombre, p_descripcion, p_salario);
    
    DBMS_OUTPUT.PUT_LINE('Registro insertado en la tabla PUESTO.');
END;



--EMPLEADO PROCEDURE-----------------------------------------
CREATE OR REPLACE PROCEDURE CrearEmpleado (
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_fecha IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_telefono IN NUMBER,
    p_direccion IN VARCHAR2,
    p_dpi IN NUMBER,
    p_puesto IN NUMBER,
    p_fecha_inicio IN VARCHAR2,
    p_id_restaurante IN VARCHAR2
) AS
    v_max_personal NUMBER;
    v_personal_actual NUMBER;
BEGIN
    IF existePuesto(p_puesto) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de puesto inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    
    IF existeRestaurate(p_id_restaurante) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de Restaurante inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    IF NOT REGEXP_LIKE(p_correo, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
        DBMS_OUTPUT.PUT_LINE('Correo no válido'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;   

        
    SELECT PERSONAL INTO v_max_personal FROM RESTAURANTES WHERE Id = p_id_restaurante;
    
    -- Obtener la cantidad actual de personal para el restaurante
    SELECT COUNT(*) INTO v_personal_actual FROM EMPLEADOS WHERE IdRestaurante = p_id_restaurante;
    
    -- Verificar si la cantidad actual de personal más uno (por el nuevo empleado a insertar) es mayor que el máximo permitido para el restaurante
    IF v_personal_actual + 1 > v_max_personal THEN
        DBMS_OUTPUT.PUT_LINE('El restaurante ya alcanzó el máximo de empleados permitido'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;

    INSERT INTO EMPLEADOS (NOMBRE, APELLIDOS, Fecha_Nacimiento, CORREO, TELEFONO, DIRECCION, DPI, PUESTO, Fecha_Inicio,IdRestaurante) 
    VALUES (p_nombre,p_apellido,TO_DATE(p_fecha, 'DD-MM-YYYY'),p_correo,p_telefono,p_direccion,p_dpi,p_puesto,TO_DATE(p_fecha_inicio, 'DD-MM-YYYY') ,p_id_restaurante);
   
    DBMS_OUTPUT.PUT_LINE('Registro insertado en la tabla EMPLEADO.');
END;

CREATE OR REPLACE FUNCTION existePuesto (
	p_id IN NUMBER
) RETURN INT AS
    v_count NUMBER;
BEGIN
    -- Contar la cantidad de registros en la tabla restaurante que tienen el mismo ID
    SELECT COUNT(*) INTO v_count FROM PUESTOS WHERE id = p_id;
    -- Retornar TRUE si no se encontró ningún registro con el mismo ID, FALSE en caso contrario
    IF v_count = 0 THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END;




--CLIENTE PROCEDURE-----------------------------------------
CREATE OR REPLACE PROCEDURE RegistrarCliente (
    p_dpi IN NUMBER,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_fecha IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_telefono IN NUMBER,
    p_nit IN VARCHAR2
) AS
BEGIN
    IF existeCliente(p_dpi) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Cliente ya registrado'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;

    IF NOT REGEXP_LIKE(p_correo, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
        DBMS_OUTPUT.PUT_LINE('Correo no válido'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;

    IF LENGTH(p_nit) > 0 THEN
        INSERT INTO CLIENTES  
        VALUES (p_dpi,p_nombre,p_apellido,TO_DATE(p_fecha, 'DD-MM-YYYY'),p_correo,p_telefono,p_nit);
    ELSE
        INSERT INTO CLIENTES  
        VALUES (p_dpi,p_nombre,p_apellido,TO_DATE(p_fecha, 'DD-MM-YYYY'),p_correo,p_telefono,'CF');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Registro insertado en la tabla CLIENTE.');
END;

CREATE OR REPLACE FUNCTION existeCliente (
	p_id IN NUMBER
) RETURN INT AS
    v_count NUMBER;
BEGIN
    
    SELECT COUNT(*) INTO v_count FROM CLIENTES WHERE DPI = p_id;
    
    IF v_count = 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END;




--DIRECCION PROCEDURE-----------------------------------------
CREATE OR REPLACE PROCEDURE RegistrarDireccion (
    p_dpi IN NUMBER,
    p_direccion IN VARCHAR2,
    p_municipio IN VARCHAR2,
    p_zona IN NUMBER
) AS
BEGIN
    IF existeCliente(p_dpi) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de cliente inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;

     IF p_zona < 0 THEN
        DBMS_OUTPUT.PUT_LINE('La zona debe ser Positiva.'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;

    INSERT INTO DIRECCIONES (DPI_Cliente, Direccion, Municipio, Zona)
    VALUES (p_dpi,p_direccion,p_municipio,p_zona);

    DBMS_OUTPUT.PUT_LINE('Registro insertado en la tabla DIRECCIONES.');
END;




--ORDENES PROCEDURE-----------------------------------------------
CREATE OR REPLACE PROCEDURE CrearOrden (
    p_dpi IN NUMBER,
    p_direccion IN NUMBER,
    p_canal IN CHAR
) AS
    p_zona NUMBER;
    p_municipio VARCHAR2(50);
    contador NUMBER;
    id_R VARCHAR2(100);
BEGIN
    IF existeCliente(p_dpi) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de cliente inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    
    IF UPPER(p_canal) = 'L' OR UPPER(p_canal) = 'A' THEN -- Validar que el canal sea 'L' o 'A'
        SELECT ZONA INTO p_zona FROM DIRECCIONES WHERE ID = p_direccion;
        SELECT MUNICIPIO INTO p_municipio FROM DIRECCIONES WHERE ID = p_direccion;
    ELSE
        DBMS_OUTPUT.PUT_LINE('El parámetro "canal" debe ser "L" o "A"'); -- Imprimir mensaje de error
        RETURN;
    END IF;

    SELECT COUNT(*) INTO contador FROM RESTAURANTES WHERE p_zona=ZONA AND p_municipio=MUNICIPIO;

    IF contador=0 THEN
        -- Imprimir mensaje de error
        INSERT INTO ORDENES (DPI_CLIENTE, ID_DIRECCION, CANAL, INICIO, ESTADO)
        VALUES (p_dpi,p_direccion,p_canal,GETCURRENTDATE(),'SIN COBERTURA');
       	DBMS_OUTPUT.PUT_LINE('NO HAY RESTAURANTES EN LA DIRECCION SOLICITADA'); 
    ELSE
		SELECT ID INTO id_R FROM RESTAURANTES WHERE p_zona=ZONA AND p_municipio=MUNICIPIO FETCH FIRST 1 ROWS ONLY;
    	INSERT INTO ORDENES (DPI_CLIENTE, ID_DIRECCION, CANAL, INICIO,IDRESTAURANTE, ESTADO)
	    VALUES (p_dpi,p_direccion,p_canal,GETCURRENTDATE(),id_R,'INICIADA');   
	    DBMS_OUTPUT.PUT_LINE('SE INSERTO UNA ORDEN EXITOSAMENTE');  	
    END IF;

END;

--ITEMS PROCEDURE-----------------------------------------------
CREATE OR REPLACE PROCEDURE AgregarItem (
    p_IdOrden IN NUMBER,
    p_tipoProd IN CHAR,
    p_Producto IN NUMBER,
    p_Cantidad IN NUMBER,
    p_Observacion IN VARCHAR2
) AS
    p_estado VARCHAR2(20);
   p_precio DECIMAL(10,2);
BEGIN
    IF existeOrden(p_IdOrden) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de orden inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
   
   SELECT ESTADO  INTO p_estado FROM ORDENES WHERE ID = p_IdOrden;
    IF p_estado = 'INICIADA' THEN
        UPDATE ORDENES SET ESTADO = 'AGREGANDO'
        WHERE ID = p_IdOrden;
    ELSIF p_estado = 'AGREGANDO' THEN
    	DBMS_OUTPUT.PUT_LINE(':)'); -- Imprimir mensaje de error
    ELSE
    	DBMS_OUTPUT.PUT_LINE('Imposible proceder, orden de estado incorrecto'); -- Imprimir mensaje de error
        RETURN;
    END IF;

    IF p_Cantidad < 1 THEN
        DBMS_OUTPUT.PUT_LINE('La cantidad debe ser un numero positivo'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    
    IF UPPER(p_tipoProd) = 'C' THEN -- Validar que el canal sea 'C' , 'E' , 'B' o 'P'
        IF p_Producto < 1 OR p_Producto > 6 THEN
            DBMS_OUTPUT.PUT_LINE('Numero de combo inexistente'); -- Imprimir mensaje de error
            RETURN;
        ELSE
        	
	        	IF p_Producto=1 THEN p_precio:= 41.00;
	        	ELSIF p_Producto=2 THEN p_precio:= 32.00;
	        	ELSIF p_Producto=3 THEN p_precio:= 54.00;
		        ELSIF p_Producto=4 THEN p_precio:= 47.00;
	        	ELSIF p_Producto=5 THEN p_precio:= 85.00;
	        	ELSIF p_Producto=6 THEN p_precio:= 36.00;
	        END IF;
        END IF;
    ELSIF UPPER(p_tipoProd) = 'E' THEN
        IF p_Producto < 1 OR p_Producto > 3 THEN
            DBMS_OUTPUT.PUT_LINE('Numero de entrada inexistente'); -- Imprimir mensaje de error
            RETURN;
        ELSE
        	
	        	IF p_Producto=1 THEN p_precio:= 15.00;
	        	ELSIF p_Producto=2 THEN p_precio:= 17.00;
	        	ELSIF p_Producto=3 THEN p_precio:= 12.00;
	        END IF;
        END IF;
    ELSIF UPPER(p_tipoProd) = 'B' THEN
        IF p_Producto < 1 OR p_Producto > 5 THEN
            DBMS_OUTPUT.PUT_LINE('Numero de BEBIDA inexistente'); -- Imprimir mensaje de error
            RETURN;
        ELSE
        	 
	        	IF p_Producto=1 THEN p_precio:= 12.00;
	        	ELSIF p_Producto=2 THEN p_precio:= 12.00;
	        	ELSIF p_Producto=3 THEN p_precio:= 12.00;
		        ELSIF p_Producto=4 THEN p_precio:= 12.00;
	        	ELSIF p_Producto=5 THEN p_precio:= 18.00;
	        END IF;
        END IF;
    ELSIF UPPER(p_tipoProd) = 'P' THEN
        IF p_Producto < 1 OR p_Producto > 4 THEN
            DBMS_OUTPUT.PUT_LINE('Numero de POSTRE inexistente'); -- Imprimir mensaje de error
            RETURN;
        ELSE
        	 
	        	IF p_Producto=1 THEN p_precio:= 13.00;
	        	ELSIF p_Producto=2 THEN p_precio:= 15.00;
	        	ELSIF p_Producto=3 THEN p_precio:= 8.00 ;
		        ELSIF p_Producto=4 THEN p_precio:= 10.00;
	        END IF;
        END IF;
    ELSE
    	DBMS_OUTPUT.PUT_LINE('El parámetro TIPO de producto debe ser C, E, B o P'); -- Imprimir mensaje de error
        RETURN;
    END IF;

    INSERT INTO DETALLE
   	VALUES (p_IdOrden, p_tipoProd, p_Producto, p_Cantidad,p_precio, p_Observacion);
    DBMS_OUTPUT.PUT_LINE('ARTICULO AÑADIDO EXITOSAMENTE');

END;


CREATE OR REPLACE FUNCTION existeOrden (
	p_id IN NUMBER
) RETURN INT AS
    v_count NUMBER;
BEGIN
    
    SELECT COUNT(*) INTO v_count FROM ORDENES WHERE ID = p_id;
    
    IF v_count = 0 THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END;



--FACTURA PROCEDURE-----------------------------------------------
CREATE OR REPLACE PROCEDURE ConfirmarOrden (
    p_IdOrden IN NUMBER,
    p_FormaPago IN CHAR,
    p_idRepartidor IN NUMBER
) AS
    p_estado VARCHAR2(20);
    p_id_dir NUMBER;
    p_dpi NUMBER;
    p_municipio VARCHAR2(50);
    p_monto DECIMAL(10,2);
    NIT VARCHAR2(100);
    p_serie VARCHAR(20);

BEGIN
    IF existeOrden(p_IdOrden) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de orden inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    SELECT ESTADO  INTO p_estado FROM ORDENES WHERE ID = p_IdOrden;
    SELECT ID_DIRECCION INTO p_id_dir FROM ORDENES WHERE ID=p_IdOrden;
    SELECT MUNICIPIO INTO p_municipio FROM DIRECCIONES WHERE ID=p_id_dir;
    SELECT DPI_CLIENTE INTO p_dpi FROM ORDENES WHERE ID=p_IdOrden;
    SELECT NIT INTO NIT FROM CLIENTES WHERE DPI = p_dpi;

    SELECT ESTADO  INTO p_estado FROM ORDENES WHERE ID = p_IdOrden;
    IF p_estado = 'AGREGANDO' THEN
        UPDATE ORDENES SET ESTADO = 'EN CAMINO'
        WHERE ID = p_IdOrden;
    ELSE
    	DBMS_OUTPUT.PUT_LINE('Imposible proceder, orden de estado incorrecto'); -- Imprimir mensaje de error
        RETURN;
    END IF;


    IF UPPER(p_FormaPago) = 'E' OR UPPER(p_FormaPago) = 'T' THEN -- Validar que el canal sea 'E' o 'T'
        IF existeEmplado(p_idRepartidor)=0 THEN
            DBMS_OUTPUT.PUT_LINE('Empleado inexistente'); -- Imprimir mensaje de error
            RETURN;
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Forma de pago invalida'); -- Imprimir mensaje de error
        RETURN;
    END IF;
    
    SELECT SUM(Precio*CANTIDAD)
    INTO p_monto
    FROM DETALLE
    WHERE Id_Orden = p_IdOrden;

    SELECT CONCAT(TO_CHAR(SYSDATE, 'YYYY'), p_IdOrden) INTO p_serie FROM DUAL;

    INSERT INTO FACTURA 
    VALUES (p_serie,p_monto,p_municipio,GETCURRENTDATE(),p_IdOrden,NIT,p_FormaPago,p_idRepartidor);   
	DBMS_OUTPUT.PUT_LINE('SE INSERTO LA FACTURA EXITOSAMENTE');  	

END;



CREATE OR REPLACE FUNCTION existeEmplado (
	p_id IN NUMBER
) RETURN INT AS
    v_count NUMBER;
BEGIN
    
    SELECT COUNT(*) INTO v_count FROM EMPLEADOS WHERE ID = p_id;
    
    IF v_count = 0 THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END;




--FINALIZAR PROCEDURE-----------------------------------------------
CREATE OR REPLACE PROCEDURE FinalizarOrden (
    p_IdOrden IN NUMBER
) AS
    p_estado VARCHAR2(20);

BEGIN
    IF existeOrden(p_IdOrden) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Identificador de orden inexistente'); -- Imprimir mensaje de error
        RETURN; -- Salir del procedimiento
    END IF;
    SELECT ESTADO  INTO p_estado FROM ORDENES WHERE ID = p_IdOrden;
    IF p_estado = 'EN CAMINO' THEN
        UPDATE ORDENES SET ESTADO = 'ENTREGADA'
        WHERE ID = p_IdOrden;
        UPDATE ORDENES SET ENTREGA = GETCURRENTDATE()
        WHERE ID = p_IdOrden;
    ELSE
    	DBMS_OUTPUT.PUT_LINE('Imposible proceder, orden de estado incorrecto'); -- Imprimir mensaje de error
        RETURN;
    END IF;

	DBMS_OUTPUT.PUT_LINE('SE ENTREGO LA ORDEN EXITOSAMENTE');  	

END;



-----------------------------------------------------------------------------
---------------------------REPORTES------------------------------------------

--1.Listar restaurantes
CREATE OR REPLACE PROCEDURE Listar_restaurantes
AS
BEGIN
  FOR r IN (SELECT Id, Direccion, Municipio, Zona, Telefono, Personal,
                   CASE WHEN Parqueo = 1 THEN 'Sí' ELSE 'No' END AS Tiene_Parqueo
            FROM RESTAURANTES)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Id: ' || r.Id);
    DBMS_OUTPUT.PUT_LINE('Direccion: ' || r.Direccion);
    DBMS_OUTPUT.PUT_LINE('Municipio: ' || r.Municipio);
    DBMS_OUTPUT.PUT_LINE('Zona: ' || r.Zona);
    DBMS_OUTPUT.PUT_LINE('Telefono: ' || r.Telefono);
    DBMS_OUTPUT.PUT_LINE('Personal: ' || r.Personal);
    DBMS_OUTPUT.PUT_LINE('¿Tiene Parqueo?: ' || r.Tiene_Parqueo);
    DBMS_OUTPUT.PUT_LINE('------------------------');
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('------------------------');
END;


--2.Consultar empleado
CREATE OR REPLACE PROCEDURE ConsultarEmpleado (
    p_id IN NUMBER
)
AS
   CURSOR cursor_emp IS
        SELECT e.Id, e.Nombre || ' ' || e.Apellidos AS Nombre_Completo, e.Fecha_Nacimiento, e.Correo, e.Telefono, e.Direccion, DPI, p.Nombre, e.Fecha_Inicio
        FROM EMPLEADOS e
        INNER JOIN PUESTOS p ON e.PUESTO = p.ID
        WHERE e.Id = p_id;

    emp_rec cursor_emp%ROWTYPE;

BEGIN

    IF existeEmplado(p_id)=0 THEN
        DBMS_OUTPUT.PUT_LINE('Empleado inexistente'); -- Imprimir mensaje de error
        DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
        RETURN;
    END IF;

    OPEN cursor_emp;
    FETCH cursor_emp INTO emp_rec;

    IF cursor_emp%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ID del Empleado: ' || emp_rec.Id);
        DBMS_OUTPUT.PUT_LINE('Nombre Completo: ' || emp_rec.Nombre_Completo);
        DBMS_OUTPUT.PUT_LINE('Fecha de Nacimiento: ' || emp_rec.Fecha_Nacimiento);
        DBMS_OUTPUT.PUT_LINE('Correo: ' || emp_rec.Correo);
        DBMS_OUTPUT.PUT_LINE('Telefono: ' || emp_rec.Telefono);
        DBMS_OUTPUT.PUT_LINE('Direccion: ' || emp_rec.Direccion);
        DBMS_OUTPUT.PUT_LINE('DPI: ' || emp_rec.DPI);
        DBMS_OUTPUT.PUT_LINE('Nombre del Puesto: ' || emp_rec.Nombre);
        DBMS_OUTPUT.PUT_LINE('Fecha de Inicio: ' || emp_rec.Fecha_Inicio);
       DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
    ELSE
        DBMS_OUTPUT.PUT_LINE('No se encontraron registros para el empleado con ID ' || p_id);
    END IF;

    CLOSE cursor_emp;

END;




--3.Consultar Pedidos Cliente
CREATE OR REPLACE PROCEDURE ConsultarPedidosCliente (
    p_IdOrden IN NUMBER
)
AS
    CURSOR cur_detalle IS
        SELECT Producto, 
            CASE 
                WHEN TIPOPRODUCTO='C' THEN 'COMBO' 
                WHEN  TIPOPRODUCTO='E' THEN 'EXTRA' 
                WHEN TIPOPRODUCTO='B' THEN 'BEBIDA' 
                WHEN TIPOPRODUCTO='P' THEN 'POSTRE' 
            END AS Tipo_Producto,
            Precio, Cantidad, Observacion
        FROM DETALLE 
        WHERE ID_ORDEN = p_IdOrden;
        
    v_producto DETALLE.Producto%TYPE;
    v_tipo_producto VARCHAR2(10);
    v_precio DETALLE.Precio%TYPE;
    v_cantidad DETALLE.Cantidad%TYPE;
    v_observacion DETALLE.Observacion%TYPE;
BEGIN
    IF existeOrden(p_IdOrden)=0 THEN
        DBMS_OUTPUT.PUT_LINE('ORDEN inexistente'); -- Imprimir mensaje de error
        RETURN;
    END IF;
    OPEN cur_detalle;
    LOOP
        FETCH cur_detalle INTO v_producto, v_tipo_producto, v_precio, v_cantidad, v_observacion;
        EXIT WHEN cur_detalle%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Producto: ' || v_producto);
        DBMS_OUTPUT.PUT_LINE('Tipo de producto: ' || v_tipo_producto);
        DBMS_OUTPUT.PUT_LINE('Precio: ' || r.v_precio);
        DBMS_OUTPUT.PUT_LINE('Cantidad: ' || v_cantidad);
        DBMS_OUTPUT.PUT_LINE('Observación: ' || v_observacion);
        DBMS_OUTPUT.PUT_LINE('------------------------');
        -- Realizar alguna acción con los datos obtenidos, por ejemplo, imprimirlos
        DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------');
    END LOOP;
    CLOSE cur_detalle;
END;




--4.Consultar historial de pedidos Cliente
CREATE OR REPLACE PROCEDURE ConsultarHistorialOrdenes (
    p_dpi IN NUMBER
)
AS
    -- Declarar cursor
    CURSOR c_historial IS
        SELECT o.ID, o.Inicio AS FECHA, f.Total AS MONTO, r.ID as RESTAURANTE, 
               rp.Nombre|| ' ' || rp.Apellidos as REPARTIDOR, d.Direccion, o.Canal
        FROM ORDENES o 
        INNER JOIN RESTAURANTES r ON o.IdRestaurante = r.Id 
        INNER JOIN DIRECCIONES d ON o.Id_Direccion = d.Id 
        INNER JOIN FACTURA f ON o.ID = f.IdOrden 
        INNER JOIN EMPLEADOS rp ON f.IdRepartidor = rp.Id 
        WHERE o.DPI_CLIENTE = p_dpi;
    -- Declarar variables para almacenar los valores del cursor
    v_id ORDENES.ID%TYPE;
    v_fecha ORDENES.Inicio%TYPE;
    v_monto FACTURA.Total%TYPE;
    v_restaurante RESTAURANTES.ID%TYPE;
    v_repartidor EMPLEADOS.Nombre%TYPE;
    v_direccion DIRECCIONES.Direccion%TYPE;
    v_canal ORDENES.Canal%TYPE;
BEGIN
    IF existeCliente(p_dpi)=0 THEN
        DBMS_OUTPUT.PUT_LINE('CLIENTE inexistente'); -- Imprimir mensaje de error
        RETURN;
    END IF;
    -- Abrir cursor
    OPEN c_historial;
    -- Recorrer cursor y asignar valores a las variables
    LOOP
        FETCH c_historial INTO v_id, v_fecha, v_monto, v_restaurante, v_repartidor, v_direccion, v_canal;
        EXIT WHEN c_historial%NOTFOUND;
        -- Imprimir valores de cada fila
        DBMS_OUTPUT.PUT_LINE('ID: ' || v_id);
        DBMS_OUTPUT.PUT_LINE('FECHA: ' || v_fecha);
        DBMS_OUTPUT.PUT_LINE('MONTO: ' || v_monto);
        DBMS_OUTPUT.PUT_LINE('RESTAURANTE: ' || v_restaurante);
        DBMS_OUTPUT.PUT_LINE('REPARTIDOR: ' || v_repartidor);
        DBMS_OUTPUT.PUT_LINE('DIRECCIÓN: ' || v_direccion);
        DBMS_OUTPUT.PUT_LINE('CANAL: ' || v_canal);
        DBMS_OUTPUT.PUT_LINE('------------------------');
        
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------');
    -- Cerrar cursor
    CLOSE c_historial;
END;



--5. Consultar direcciones de un cliente
CREATE OR REPLACE PROCEDURE ConsultarDirecciones (
    p_dpi IN NUMBER
)
AS
    CURSOR c_direcciones IS
        SELECT DIRECCION, MUNICIPIO, ZONA
        FROM DIRECCIONES
        WHERE DPI_CLIENTE = p_dpi;

    v_direccion VARCHAR2(100);
    v_municipio VARCHAR2(50);
    v_zona VARCHAR2(50);
BEGIN
     IF existeCliente(p_dpi)=0 THEN
        DBMS_OUTPUT.PUT_LINE('CLIENTE inexistente'); -- Imprimir mensaje de error
        RETURN;
    END IF;
    OPEN c_direcciones;
    LOOP
        FETCH c_direcciones INTO v_direccion, v_municipio, v_zona;
        EXIT WHEN c_direcciones%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Dirección: ' || v_direccion);
        DBMS_OUTPUT.PUT_LINE('Municipio: ' || v_municipio);
        DBMS_OUTPUT.PUT_LINE('Zona: ' || v_zona);
        DBMS_OUTPUT.PUT_LINE('------------------------');
        
    END LOOP;
    CLOSE c_direcciones;
    DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------');
END;



--6. Mostrar órdenes según estado
CREATE OR REPLACE PROCEDURE MostrarOrdenes (
    p_estado IN NUMBER
)
AS
    s_estado VARCHAR2(20);
    CURSOR c_ordenes IS
        SELECT o.ID, o.ESTADO, o.Inicio AS FECHA, o.DPI_CLIENTE AS DPI_CLIENTE, d.Direccion, 
            r.ID as RESTAURANTE , o.Canal
        FROM ORDENES o 
        INNER JOIN RESTAURANTES r ON o.IdRestaurante = r.Id 
        INNER JOIN DIRECCIONES d ON o.Id_Direccion = d.Id 
        WHERE o.ESTADO = s_estado;
    r_ordenes c_ordenes%ROWTYPE;
BEGIN
    IF p_estado = 1 THEN
        s_estado:='INICIADA';
    ELSIF p_estado = 2 THEN
        s_estado:='AGREGANDO';
    ELSIF p_estado = 3 THEN
        s_estado:='EN CAMINO';
    ELSIF p_estado = 4 THEN
        s_estado:='ENTREGADA';
    ELSIF p_estado = -1 THEN
        s_estado:='SIN COBERTURA';
    ELSE
        DBMS_OUTPUT.PUT_LINE('ENTRADA DE ESTADO INVALIDA, INGRESE UN VALOR CORRECTO');  	
        RETURN;
    END IF;

    OPEN c_ordenes;
    LOOP
        FETCH c_ordenes INTO r_ordenes;
        EXIT WHEN c_ordenes%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID: ' || r_ordenes.ID);
        DBMS_OUTPUT.PUT_LINE('ESTADO: ' || r_ordenes.ESTADO);
        DBMS_OUTPUT.PUT_LINE('FECHA: ' || r_ordenes.FECHA);
        DBMS_OUTPUT.PUT_LINE('DPI CLIENTE: ' || r_ordenes.DPI_CLIENTE);
        DBMS_OUTPUT.PUT_LINE('DIRECCION: ' || r_ordenes.DIRECCION);
        DBMS_OUTPUT.PUT_LINE('RESTAURANTE: ' || r_ordenes.RESTAURANTE);
        DBMS_OUTPUT.PUT_LINE('CANAL: ' || r_ordenes.CANAL);
        DBMS_OUTPUT.PUT_LINE('------------------------');
        
    END LOOP;
    CLOSE c_ordenes;
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------');
END;



--7. Retornar encabezados de factura según el día
CREATE OR REPLACE PROCEDURE ConsultarFacturas (
    p_dia IN NUMBER,
    p_mes IN NUMBER,
    p_año IN NUMBER
)
AS
    fecha_creada VARCHAR2(20);
    v_serie      FACTURA.SERIE%TYPE;
    v_total      FACTURA.TOTAL%TYPE;
    v_lugar      FACTURA.LUGAR%TYPE;
    v_fecha_hora FACTURA.FECHA_HORA%TYPE;
    v_idorden    FACTURA.IDORDEN%TYPE;
    v_nit        FACTURA.NIT%TYPE;
    v_forma_pago FACTURA.FORMA_PAGO%TYPE;
    CURSOR c_facturas IS
        SELECT SERIE, TOTAL, LUGAR, FECHA_HORA, IDORDEN, NIT, FORMA_PAGO 
        FROM FACTURA
        WHERE TRUNC(FECHA_HORA) = TO_DATE(fecha_creada, 'YYYY-MM-DD');
BEGIN
    fecha_creada := TO_CHAR(p_año, 'FM0000') || '-' || TO_CHAR(p_mes, 'FM00') || '-' || TO_CHAR(p_dia, 'FM00');
    OPEN c_facturas;
    LOOP
        FETCH c_facturas INTO v_serie, v_total, v_lugar, v_fecha_hora, v_idorden, v_nit, v_forma_pago;
        EXIT WHEN c_facturas%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('FACTURA: ' || v_serie || '-' || v_idorden);
        DBMS_OUTPUT.PUT_LINE('TOTAL: ' || r_ordenes.ESTADO);
        DBMS_OUTPUT.PUT_LINE('FECHA: ' || r_ordenes.FECHA);
        DBMS_OUTPUT.PUT_LINE('------------------------');
        -- Aquí puedes realizar alguna tarea con cada resultado, por ejemplo imprimirlo en la consola
        
    END LOOP;
    CLOSE c_facturas;
    DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------');
END;



--8. Retornar encabezados de factura según el día
CREATE OR REPLACE PROCEDURE ConsultarTiempos (
    p_minutos IN NUMBER
)
AS
    CURSOR c_ordenes IS 
        SELECT o.ID AS IdOrden, d.Direccion AS DireccionEntrega, o.Inicio AS FechaInicio, o.ENTREGA AS FechaFin,
        ROUND((o.ENTREGA - o.Inicio)*24*60) AS TiempoEsperaMinutos, e.Nombre|| ' '|| e.Apellidos AS Repartidor
        FROM ORDENES o
        INNER JOIN DIRECCIONES d ON o.Id_Direccion = d.Id
        INNER JOIN FACTURA f ON o.ID = f.IdOrden
        INNER JOIN EMPLEADOS e ON f.IdRepartidor = e.Id;
    v_idOrden NUMBER;
    v_direccion VARCHAR2(200);
    v_fechaInicio DATE;
    v_fechaFin DATE;
    v_tiempoEspera NUMBER;
    v_repartidor VARCHAR2(100);
BEGIN
     IF p_minutos<0 THEN
        DBMS_OUTPUT.PUT_LINE('LA ENTRADA EN MINUTOS DEBE SER POSITIVA'); -- Imprimir mensaje de error
        RETURN;
    END IF;
    OPEN c_ordenes;
    LOOP
        FETCH c_ordenes INTO v_idOrden, v_direccion, v_fechaInicio, v_fechaFin, v_tiempoEspera, v_repartidor;
        EXIT WHEN c_ordenes%NOTFOUND;
        IF (v_tiempoEspera >= p_minutos) THEN
             DBMS_OUTPUT.PUT_LINE('IdOrden: ' || v_idOrden);
            DBMS_OUTPUT.PUT_LINE('DIRECCION: ' || v_direccion);
            DBMS_OUTPUT.PUT_LINE('FECHA INICIO: ' || v_fechaInicio);
             DBMS_OUTPUT.PUT_LINE('FECHA ENTREGA: ' || v_fechaFin);
            DBMS_OUTPUT.PUT_LINE('TIEMPO DE ESPERA: ' || v_tiempoEspera);
            DBMS_OUTPUT.PUT_LINE('REPARTIDOR: ' || v_repartidor);
            DBMS_OUTPUT.PUT_LINE('------------------------');
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------------');
    CLOSE c_ordenes;
END;
